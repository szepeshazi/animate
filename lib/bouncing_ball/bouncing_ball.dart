import 'dart:ui';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import '../shared/ticker_notifier.dart';
import 'exp_sprv.dart';

/// Import file generated by cli

class BouncingBallWidget extends StatelessWidget {
  const BouncingBallWidget({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<FragmentProgram>(
      future: expFragmentProgram(),
      builder: ((context, snapshot) {
        if (!snapshot.hasData) {
          /// Shader is loading
          return const CircularProgressIndicator();
        }
        return SizedBox(width: double.infinity, height: double.infinity, child: FlutterShaderTest(program: snapshot.data!));
      }),
    );
  }
}

/// Wrapper around the [ShaderPainter]. Nothing fancy here.
class FlutterShaderTest extends StatelessWidget {
  const FlutterShaderTest({Key? key, required this.program}) : super(key: key);

  final FragmentProgram program;

  @override
  Widget build(BuildContext context) {
    return CustomPaint(painter: ShaderPainter(tickerNotifier: TickerNotifier(), program: program));
  }
}

/// Renderer used for rendering and testing our shaders.
class ShaderPainter extends CustomPainter {
  ShaderPainter({required this.tickerNotifier, required this.program}) : super(repaint: tickerNotifier) {
    tickerNotifier.addListener(() {
      elapsed = tickerNotifier.value;
    });
  }

  Duration elapsed = Duration.zero;
  final TickerNotifier tickerNotifier;

  final FragmentProgram program;

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..shader = program.shader(
        floatUniforms: Float32List.fromList(
          [
            // float time
            elapsed.inMilliseconds / 1000,
            // vec2 resolution
            size.width,
            size.height,
          ],
        ),
      );
    canvas.drawRect(Rect.fromLTWH(0, 0, size.width, size.height), paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}
